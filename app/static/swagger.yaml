swagger: '2.0'
info:
  title: "CT Backend Project"
  description: "An API project for a fictional auto mechanic shop"
  version: "1.0.0"
host: "coding-temple-backend-specialization-uqof.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header



paths: 

  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login endpoint, generates token"
      description: "Validates customer credentials, generates and returns a customer specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"


  /customers:
    
    post:
      tags:
        - Customers
      summary: "Endpoint to create/register a new user."
      description: "Endpoint to create a new customer in the auto mechanic system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Customer."
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Successful Customer Creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"

    get:
      tags:
        - Customers
      summary: "Returns all Customers"
      description: "Endpoint to retrieve a list of all customers."
      responses:
        200:
          description: "Retrieved customers successfully"           
          schema:
            $ref: "#/definitions/AllCustomers"

    put: 
      tags:
        - Customers
      summary: "Endpoint to update a user."
      description: "Endpoint to update a customer, this is a token authenticated route, and the user must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Customer."
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          description: "Successfully Updated customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"

    delete:
      tags:
        - Customers
      summary: "Endpoint to delete a customer"
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account"
      security:
       - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted Customer"           
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"


  /mechanics:
    post:
      tags:
        - Mechanics
      summary: "Endpoint to create a new mechanic."
      description: "Endpoint to create a new mechanic in the auto mechanic system, email and phone must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Mechanic."
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Successful Mechanic Creation"
          schema:
            $ref: "#/definitions/CreateMechanicResponse"

    get:
      tags:
        - Mechanics
      summary: "Returns all Mechanics"
      description: "Endpoint to retrieve a list of all mechanics."
      responses:
        200:
          description: "Retrieved mechanics successfully"           
          schema:
            $ref: "#/definitions/AllMechanics"
  

  /mechanics/{mechanicId}:
    
    put:
      tags:
        - Mechanics
      summary: "Endpoint to update a mechanic."
      description: "Endpoint to update a mechanic's information in the auto mechanic system. Pass in mechanic ID."
      parameters:
      - in: "path"
        name: "mechanicId"
        description: "ID of mechanic to update"
        required: true
        type: integer
      - in: "body"
        name: "body"
        description: "Information required to update an existing Mechanic."
        required: true
        schema:
          $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Successfully updated Mechanic."
          schema:
            $ref: "#/definitions/UpdateMechanicResponse"
    
    delete:
      tags:
        - Mechanics
      summary: "Endpoint to delete a Mechanic."
      description: "Deletes a mechanic from the auto mechanic system. Requires mechanic ID."
      parameters:
        - in: "path"
          name: "mechanicId"
          description: "ID of mechanic to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successfully deleted mechanic"
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"


  /mechanics/hardest-workers:
    
    get:
      tags:
        - Mechanics
      summary: "Returns hardest working mechanics"
      description: "Returns list of mechanics sorted by number of service tickets associated with their accounts"
      responses:
        200:
          description: "Retrieved mechanics successfully"
          schema:
            $ref: "#/definitions/AllMechanics"


  /inventory:

    post:
      tags:
        - Inventory
      summary: "Endpoint to add to inventory"
      description: "Endpoint to add item to inventory, name and price required"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to add a new item to Inventory."
          required: true
          schema:
            $ref: "#/definitions/CreateInventoryPayload"
      responses:
        200:
          description: "Item added successfully"
          schema:
            $ref: "#/definitions/CreateInventoryResponse"
      
    get:
      tags:
        - Inventory
      summary: Get inventory
      description: Returns a list of items from the inventory.
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved inventory
          schema:
            $ref: "#/definitions/AllInventory"

  /inventory/{itemId}:
    
    put:
      tags:
        - Inventory
      summary: "Endpoint to update an inventory item."
      description: "Endpoint to update an inventory item's information in the auto mechanic system. Pass in item ID."
      parameters:
      - in: "path"
        name: "itemId"
        description: "ID of item to update"
        required: true
        type: integer
      - in: "body"
        name: "body"
        description: "Information required to update an item."
        required: true
        schema:
          $ref: "#/definitions/UpdateInventoryPayload"
      responses:
        200:
          description: "Successfully updated Inventory."
          schema:
            $ref: "#/definitions/UpdateInventoryResponse"
    
    delete:
      tags:
        - Inventory
      summary: "Endpoint to delete an item."
      description: "Deletes an item from the auto mechanic system inventory. Requires item ID."
      parameters:
        - in: "path"
          name: "itemId"
          description: "ID of item to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successfully deleted inventory item"
          schema:
            $ref: "#/definitions/DeleteInventoryResponse"

  /service-tickets:

    post:
      tags:
        - Service Tickets
      summary: "Create a new service ticket"
      description: "Endpoint to create a new service ticket and assign mechanics."
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          description: "Service ticket created successfully"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
    
    get:
      tags:
        - Service Tickets
      summary: "Retrieve all service tickets"
      description: "Returns a list of all service tickets"
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          type: integer
        - name: per_page
          in: query
          description: Number of tickets per page
          required: false
          type: integer
      responses:
        200:
          description: "List of service tickets"
          schema:
            type: array
            items:
              $ref: "#/definitions/ServiceTicketResponse"

  /service-tickets/{ticket_id}:
    put:
      tags:
        - Service Tickets
      summary: "Edit a service ticket"
      description: "Updates a service ticket's mechanics and details."
      parameters:
        - in: "path"
          name: "ticket_id"
          required: true
          type: integer
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/EditServiceTicketPayload"
      responses:
        200:
          description: "Service ticket updated"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"

    delete:
      tags:
        - Service Tickets
      summary: "Delete a service ticket"
      description: "Removes a service ticket from the system"
      parameters:
        - in: "path"
          name: "ticket_id"
          required: true
          type: integer
      responses:
        200:
          description: "Service ticket deleted"

  /service-tickets/{ticket_id}/add-item/{item_id}:
    post:
      tags:
        - Service Tickets
      summary: "Add inventory item to service ticket"
      description: "Links an inventory item to a service ticket."
      parameters:
        - in: "path"
          name: "ticket_id"
          required: true
          type: integer
        - in: "path"
          name: "item_id"
          required: true
          type: integer
      responses:
        200:
          description: "Item added to service ticket"

  /service-tickets/{ticket_id}/remove-item/{item_id}:
    post:
      tags:
        - Service Tickets
      summary: "Remove inventory item from service ticket"
      description: "Removes an inventory item from a service ticket."
      parameters:
        - in: "path"
          name: "ticket_id"
          required: true
          type: integer
        - in: "path"
          name: "item_id"
          required: true
          type: integer
      responses:
        200:
          description: "Item removed from service ticket"

# I had ChatGPT write the documentation for the service tickets because I got tired of the grind and I didn't want to mess up
# with all the different tables linking to each other. If that's not OK, I can delete it and write it myself.
# Just let me know if that's necessary.


definitions: 

  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
      
    required:
      - email
      - password
    
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password


  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        password:
          type: "string"

  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password

  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string"

  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "double"
      
    required:
      - name
      - email
      - phone
      - salary

  CreateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "double"

  AllMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        salary:
          type: "number"
          format: "double"
    
  UpdateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "double"
    required:
      - name
      - email
      - phone
      - salary

  UpdateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "double"

  DeleteMechanicResponse:
    type: "object"
    properties:
      message:
        type: "string"

  CreateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "double"

  CreateInventoryResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "double"
  
  AllInventory:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        price:
          type: "number"
          format: "double"

  UpdateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "double"
    required:
      - name
      - price

  UpdateInventoryResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "double"

  DeleteInventoryResponse:
    type: "object"
    properties:
      message:
        type: "string"
  
  CreateServiceTicketPayload:
    type: object
    properties:
      VIN:
        type: string
        description: "Vehicle Identification Number"
      service_date:
        type: string
        format: date
        description: "Date when the service was performed"
      service_desc:
        type: string
        description: "Description of the service performed"
      customer_id:
        type: integer
        description: "ID of the customer for the service ticket"
      mechanic_ids:
        type: array
        items:
          type: integer
        description: "List of mechanic IDs assigned to the service ticket"

  ServiceTicketResponse:
    type: object
    properties:
      id:
        type: integer
      VIN:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
      customer:
        $ref: "#/definitions/Customer"
      mechanics:
        type: array
        items:
          $ref: "#/definitions/Mechanic"
      service_inventory:
        type: array
        items:
          $ref: "#/definitions/ServiceInventoryResponse"

  EditServiceTicketPayload:
    type: object
    properties:
      add_mechanic_ids:
        type: array
        items:
          type: integer
      remove_mechanic_ids:
        type: array
        items:
          type: integer

  ServiceInventoryResponse:
    type: object
    properties:
      id:
        type: integer
      item:
        $ref: "#/definitions/Inventory"
      quantity:
        type: integer
